name: Build and Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version-changed: ${{ steps.version.outputs.changed }}
      should-release: ${{ steps.version.outputs.changed }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        
    - name: Check version change
      id: version
      run: |
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
        # Check if package.json changed in this push
        if git diff HEAD~1 HEAD --name-only | grep -q "package.json"; then
          # Check if version field specifically changed
          PREV_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version" 2>/dev/null || echo "0.0.0")
          if [ "$CURRENT_VERSION" != "$PREV_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREV_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged: $CURRENT_VERSION"
          fi
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "package.json not modified"
        fi

  build:
    runs-on: windows-latest
    needs: check-version
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build renderer
      run: npm run build:renderer
      
    - name: Build Electron app for Windows
      run: npm run build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build-${{ needs.check-version.outputs.version }}
        path: |
          dist/*.exe
          dist/*.msi
          dist/*.zip
          dist/*Setup*.exe
          dist/*Portable*.exe
        retention-days: 30
        if-no-files-found: warn

  create-tag-and-release:
    needs: [check-version, build]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should-release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create and push tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ needs.check-version.outputs.version }}
        git push origin ${{ needs.check-version.outputs.version }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-build-${{ needs.check-version.outputs.version }}
        path: dist/
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.check-version.outputs.version }}
        name: Release ${{ needs.check-version.outputs.version }}
        files: |
          dist/*.exe
          dist/*.msi
          dist/*.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## What's Changed
          
          Version bumped to ${{ needs.check-version.outputs.version }}
          
          ### Downloads
          - **Windows Installer**: Download the `.exe` file for standard installation
          - **Portable**: Download the portable `.exe` for standalone usage
          
          Full changelog: https://github.com/${{ github.repository }}/compare/v${{ needs.check-version.outputs.version }}...HEAD
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build on push without release (when version hasn't changed)
  build-only:
    runs-on: windows-latest
    needs: check-version
    if: needs.check-version.outputs.should-release != 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build renderer
      run: npm run build:renderer
      
    - name: Test build (without publishing)
      run: npx electron-builder --windows --publish never
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}